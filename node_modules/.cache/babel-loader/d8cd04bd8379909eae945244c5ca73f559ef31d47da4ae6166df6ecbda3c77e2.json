{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\n// Short ID Generation in JavaScript\n// http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/\n\n/**\n * The default alphabet is 25 numbers and lowercase letters.\n * Any numbers that look like letters and vice versa are removed:\n * 1 l, 0 o.\n * Also the following letters are not present, to prevent any\n * expletives: cfhistu\n */\nvar DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';\n\n// Governs the length of the ID.\n// With an alphabet of 25 chars,\n// a length of 8 gives us 25^8 or\n// 152,587,890,625 possibilities.\n// Should be enough...\nvar DEFAULT_ID_LENGTH = 5;\n\n/**\n * Governs the number of times we should try to find\n * a unique value before giving up.\n * @type {Number}\n */\nvar UNIQUE_RETRIES = 9999;\n\n/**\n * Returns a randomly-generated friendly ID.\n * Note that the friendly ID is not guaranteed to be\n * unique to any other ID generated by this same method,\n * so it is up to you to check for uniqueness.\n * @return {String} friendly ID.\n */\nvar generate = exports.generate = function generate(options) {\n  var _options = _extends({}, options),\n    _options$alphabet = _options.alphabet,\n    alphabet = _options$alphabet === undefined ? DEFAULT_ALPHABET : _options$alphabet,\n    _options$idLength = _options.idLength,\n    idLength = _options$idLength === undefined ? DEFAULT_ID_LENGTH : _options$idLength;\n  var rtn = '';\n  for (var i = 0; i < idLength; i++) {\n    rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n  }\n  return rtn;\n};\n\n/**\n * Tries to generate a unique ID that is not defined in the\n * `previous` array.\n * @param  {Array} previous The list of previous ids to avoid.\n * @return {String} A unique ID, or `null` if one could not be generated.\n */\nvar generateUnique = exports.generateUnique = function generateUnique(previous) {\n  previous = previous || [];\n  var retries = 0;\n  var id = void 0;\n\n  // Try to generate a unique ID,\n  // i.e. one that isn't in the previous.\n  while (!id && retries < UNIQUE_RETRIES) {\n    id = generate();\n    if (previous.indexOf(id) !== -1) {\n      id = null;\n      retries++;\n    }\n  }\n  return id;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","DEFAULT_ALPHABET","DEFAULT_ID_LENGTH","UNIQUE_RETRIES","generate","options","_options","_options$alphabet","alphabet","undefined","_options$idLength","idLength","rtn","charAt","Math","floor","random","generateUnique","previous","retries","id","indexOf"],"sources":["C:/vaibhav-gangrade-react-portfolio.io/node_modules/react-liquid-gauge/lib/hashid.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// Short ID Generation in JavaScript\n// http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/\n\n/**\n * The default alphabet is 25 numbers and lowercase letters.\n * Any numbers that look like letters and vice versa are removed:\n * 1 l, 0 o.\n * Also the following letters are not present, to prevent any\n * expletives: cfhistu\n */\nvar DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';\n\n// Governs the length of the ID.\n// With an alphabet of 25 chars,\n// a length of 8 gives us 25^8 or\n// 152,587,890,625 possibilities.\n// Should be enough...\nvar DEFAULT_ID_LENGTH = 5;\n\n/**\n * Governs the number of times we should try to find\n * a unique value before giving up.\n * @type {Number}\n */\nvar UNIQUE_RETRIES = 9999;\n\n/**\n * Returns a randomly-generated friendly ID.\n * Note that the friendly ID is not guaranteed to be\n * unique to any other ID generated by this same method,\n * so it is up to you to check for uniqueness.\n * @return {String} friendly ID.\n */\nvar generate = exports.generate = function generate(options) {\n    var _options = _extends({}, options),\n        _options$alphabet = _options.alphabet,\n        alphabet = _options$alphabet === undefined ? DEFAULT_ALPHABET : _options$alphabet,\n        _options$idLength = _options.idLength,\n        idLength = _options$idLength === undefined ? DEFAULT_ID_LENGTH : _options$idLength;\n\n    var rtn = '';\n    for (var i = 0; i < idLength; i++) {\n        rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n    }\n    return rtn;\n};\n\n/**\n * Tries to generate a unique ID that is not defined in the\n * `previous` array.\n * @param  {Array} previous The list of previous ids to avoid.\n * @return {String} A unique ID, or `null` if one could not be generated.\n */\nvar generateUnique = exports.generateUnique = function generateUnique(previous) {\n    previous = previous || [];\n    var retries = 0;\n    var id = void 0;\n\n    // Try to generate a unique ID,\n    // i.e. one that isn't in the previous.\n    while (!id && retries < UNIQUE_RETRIES) {\n        id = generate();\n        if (previous.indexOf(id) !== -1) {\n            id = null;\n            retries++;\n        }\n    }\n\n    return id;\n};"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AAEF,IAAIC,QAAQ,GAAGJ,MAAM,CAACK,MAAM,IAAI,UAAUC,MAAM,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAAE,IAAIG,MAAM,GAAGF,SAAS,CAACD,CAAC,CAAC;IAAE,KAAK,IAAII,GAAG,IAAID,MAAM,EAAE;MAAE,IAAIV,MAAM,CAACY,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAEC,GAAG,CAAC,EAAE;QAAEL,MAAM,CAACK,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;MAAE;IAAE;EAAE;EAAE,OAAOL,MAAM;AAAE,CAAC;;AAEhQ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIS,gBAAgB,GAAG,2BAA2B;;AAElD;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,IAAI;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGhB,OAAO,CAACgB,QAAQ,GAAG,SAASA,QAAQA,CAACC,OAAO,EAAE;EACzD,IAAIC,QAAQ,GAAGhB,QAAQ,CAAC,CAAC,CAAC,EAAEe,OAAO,CAAC;IAChCE,iBAAiB,GAAGD,QAAQ,CAACE,QAAQ;IACrCA,QAAQ,GAAGD,iBAAiB,KAAKE,SAAS,GAAGR,gBAAgB,GAAGM,iBAAiB;IACjFG,iBAAiB,GAAGJ,QAAQ,CAACK,QAAQ;IACrCA,QAAQ,GAAGD,iBAAiB,KAAKD,SAAS,GAAGP,iBAAiB,GAAGQ,iBAAiB;EAEtF,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,QAAQ,EAAElB,CAAC,EAAE,EAAE;IAC/BmB,GAAG,IAAIJ,QAAQ,CAACK,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,QAAQ,CAACb,MAAM,CAAC,CAAC;EACvE;EACA,OAAOiB,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,cAAc,GAAG7B,OAAO,CAAC6B,cAAc,GAAG,SAASA,cAAcA,CAACC,QAAQ,EAAE;EAC5EA,QAAQ,GAAGA,QAAQ,IAAI,EAAE;EACzB,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,EAAE,GAAG,KAAK,CAAC;;EAEf;EACA;EACA,OAAO,CAACA,EAAE,IAAID,OAAO,GAAGhB,cAAc,EAAE;IACpCiB,EAAE,GAAGhB,QAAQ,CAAC,CAAC;IACf,IAAIc,QAAQ,CAACG,OAAO,CAACD,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7BA,EAAE,GAAG,IAAI;MACTD,OAAO,EAAE;IACb;EACJ;EAEA,OAAOC,EAAE;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}